* Test data

Rather than using my personal agenda every time I want to take a screenshot, how about this.

** TODAY [#A] Take over the world                                    :world:
DEADLINE: <2017-07-28 Fri -1m>

I'd like to be finished with this before the weekend...

** TODO [#A] Skype with president of Antarctica             :world:meetings:
SCHEDULED: <2017-07-26 Wed 21:00>

Not sure what his timezone is...

** TODO Order a pizza                                          :food:dinner:
SCHEDULED: <2017-07-26 Wed 18:00>

** SOMEDAY Rewrite Emacs in Common Lisp :Emacs:elisp:computers:software:programming:
DEADLINE: <2017-07-26 Wed>
:LOGBOOK:
-  State "SOMEDAY"    from "MAYBE"      [2017-07-24 Mon 18:59]
-  State "MAYBE"      from              [2017-07-24 Mon 18:58]
:END:

I mean, since no one has ever tried doing it before...

** CHECK /r/emacs                                            :website:Emacs:
DEADLINE: <2017-08-25 Fri -2m>
:LOGBOOK:
-  State "CHECK"      from              [2017-07-24 Mon 19:00]
:END:

** WAITING Visit the moon                                     :space:travel:
SCHEDULED: <2017-06-27 Tue>
:LOGBOOK:
-  State "WAITING"    from              [2017-07-24 Mon 19:01]
:END:

Just waiting on that callback from NASA...

** TODO [#C] Get haircut                                    :personal:@town:
SCHEDULED: <2017-07-26 Wed>

Should probably do this before I take over the world.  Want to look my best.  (Not that it will matter once I'm in charge.)

** TODO [#B] Internet                                                :bills:
DEADLINE: <2017-08-21 Mon -1m>

** TODO [#A] Spaceship lease                               :bills:spaceship:
DEADLINE: <2017-07-26 Wed +1m>

** TODO [#A] Fix flux capacitor                                  :spaceship:
SCHEDULED: <2017-07-22 Sat>

If I don't, the frobnicator will probably fall off halfway to Mars...

** TODO Practice leaping tall buildings in a single bound         :personal:
SCHEDULED: <2017-07-24 Mon +2d>
:PROPERTIES:
:STYLE:    habit
:END:

** TODO [#B] Renew membership in supervillain club
DEADLINE: <2017-07-24 Mon>

** TODO Shop for groceries                                            :food:
SCHEDULED: <2017-07-17 Mon>

* Code

#+BEGIN_SRC elisp
  ;; Before
  (let ((org-agenda-files (list "~/src/org-super-agenda/test.org"))
        (org-agenda-custom-commands
         (list '("u" "SUPER Agenda"
                 org-super-agenda ""
                 ((org-agenda-span 'day))))))
    (org-agenda nil "u"))

  ;; After
  (let ((org-agenda-files (list "~/src/org-super-agenda/test.org"))
        (org-agenda-custom-commands
         '(("u" "SUPER Agenda"
            org-super-agenda ""
            ((org-agenda-span 'day)
             (org-super-agenda-groups
              '(;; Each group has an implicit boolean OR operator between its selectors.
                (:name "Today"  ; Optionally specify section name
                       :time t  ; Items that have a time associated
                       :todo "TODAY")  ; Items that have this TODO keyword
                (:name "Important"
                       ;; Single arguments given alone
                       :tags "bills"
                       :priority "A")
                (:name "Food-related"
                       ;; Multiple args given in list with implicit OR
                       :tags ("food" "dinner"))
                (:name "Personal"
                       :habit t
                       :tags "personal")
                ;; Filter functions supply their own section names when none are given
                (:todo "WAITING")
                (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                       ;; Show this section at the end of the agenda. If you specified
                       ;; this filter last, items with these todo keywords that have
                       ;; priority A, B, or C would be displayed in those sections
                       ;; instead, because items are filtered out in the order the
                       ;; filters are listed.
                       :last t)
                (:priority ("B" "C")))))))))
    (org-agenda nil "u"))
#+END_SRC

** Misc

*** let-plist

I don't need this right now, but it might come in handy here or elsewhere.

#+BEGIN_SRC elisp
  (defmacro osa/let-plist (keys plist &rest body)
    "`cl-destructuring-bind' without the boilerplate for plists."
    ;; See https://emacs.stackexchange.com/q/22542/3871

    ;; I really don't understand why Emacs doesn't have this already.
    ;; So many things come close to it: pcase, pcase-let, map-let,
    ;; cl-destructuring-bind, -let...but none of them let you simply
    ;; bind all the values of a plist to variables with the same name as
    ;; their keys. You always have to type the name of the key twice.

    ;; For example, compare these two forms:

    ;; (-let (((&keys :from from :to to :date date :subject subject) email))
    ;;   (list from to date subject))

    ;; (osa/let-plist (:from :to :date :subject) email
    ;;   (list from to date subject))

    ;; Now, sure, sometimes you need to bind values to differently named
    ;; variables. But when you don't, I know which one I prefer.
    (declare (indent defun))
    (setq keys (cl-loop for key in keys
                        collect (intern (replace-regexp-in-string (rx bol ":") ""
                                                                  (symbol-name key)))))
    `(cl-destructuring-bind
         (&key ,@keys &allow-other-keys)
         ,plist
       ,@body))
#+END_SRC
