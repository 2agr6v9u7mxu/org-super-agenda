#+PROPERTY: LOGGING nil

#+BEGIN_HTML
<a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="dont-tread-on-emacs-150.png" align="right"></a>
#+END_HTML

* org-super-agenda

This package lets you "supercharge" your Org daily/weekly agenda.  The idea is to group items into sections, rather than having them all in one big list.

Now you can sort-of do this already with custom agenda commands, but when you do that, you lose the daily/weekly aspect of the agenda: items are no longer shown based on deadline/scheduled timestamps, but are shown no-matter-what.

So this ~org-super-agenda~ command essentially copies the ~org-agenda-list~ command, but right before it inserts the agenda items, it runs them through a set of user-defined filters that separate them into sections.  Then the sections are inserted into the agenda buffer, and any remaining items are inserted at the end.  Empty sections are not displayed.

The end result is your standard daily/weekly agenda, but arranged into sections defined by you.  You might put items with certain tags in one section, habits in another section, items with certain todo keywords in another, and items with certain priorities in another.  The possibilities are only limited by the filter functions (which you can easily add to, and more will be added here).

Here's what a normal agenda looks like:

[[screenshot-before.png]]

Here's what the "super" agenda looks like:

[[screenshot-after.png]]

** Usage

Here's the code for the example above.  The ~org-super-agenda~ command works as a custom agenda command, so you can add it to your ~org-agenda-custom-commands~ list.  You can also test it quickly like this:

#+BEGIN_SRC elisp
  (let ((org-agenda-custom-commands
         '(("u" "SUPER Agenda"
            org-super-agenda ""
            ((org-agenda-span 'day)
             (org-super-agenda-groups
              '(;; Each group has an implicit boolean OR operator between its selectors.
                (:name "Today"  ; Optionally specify section name
                       :time t  ; Items that have a time associated
                       :todo "TODAY")  ; Items that have this TODO keyword
                (:name "Important"
                       ;; Single arguments given alone
                       :tag "bills"
                       :priority "A")
                ;; Set order of multiple groups at once
                (:order-multi (2 (:name "Shopping in town"
                                        ;; Boolean AND group matches items that match all subgroups
                                        :and (:tag "shopping" :tag "@town"))
                                 (:name "Food-related"
                                        ;; Multiple args given in list with implicit OR
                                        :tag ("food" "dinner"))
                                 (:name "Personal"
                                        :habit t
                                        :tag "personal")
                                 (:name "Space-related (non-moon-or-planet-related)"
                                        ;; Regexps match case-insensitively on the entire entry
                                        :and (:regexp ("space" "NASA")
                                                      ;; Boolean NOT also has implicit OR between selectors
                                                      :not (:regexp "moon" :tag "planet")))))
                ;; Filter functions supply their own section names when none are given
                (:todo "WAITING" :order 8)
                (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                       ;; Show this section at the end of the agenda. If you specified
                       ;; this filter last, items with these todo keywords that have
                       ;; priority A, B, or C would be displayed in those sections
                       ;; instead, because items are filtered out in the order the
                       ;; filters are listed.
                       :order 9)
                (:priority ("B" "C")
                           :order 1))))))))
    (org-agenda nil "u"))
#+END_SRC

*** Group selectors

Each group selector takes an argument which can be a single atom or a list, e.g. =:tag= takes a tag or list of tags.  Some groupers are predicates, like =:deadline= or =:habit=; for consistency, they also take an argument, but it is ignored.

*Special selectors*:

+  =:and=: Group ITEMS that match all selectors in GROUP.
+  =:not=: Group ITEMS that match no selectors in GROUP.
+  =:order-multi=: Set the order of multiple groups at once, like ~(:order-multi (2 (groupA) (groupB) ...))~ to set the order of these groups to 2.

*Normal selectors:*

+  =:deadline=: Group items that have deadlines.
+  =:habit=: Group habit items. Habit items have a "STYLE: habit" Org property.
+  =:order=: A number setting the order sections will be displayed in the agenda, lowest number first.  Defaults to =0=.
+  =:priority=: Group items that match any of the given priorities. Argument may be a string or list of strings, which should be, e.g. "A" or ("B" "C").
+  =:regexp=: Group items that match a regular expression. Argument may be a string or list of strings, each of which should be a regular expression. Youâ€™ll probably want to override the section name for this group.
+  =:scheduled=: Group items that are scheduled.
+  =:tag=: Group items that match any of the given tags. Argument may be a string or list of strings.
+  =:time=: Group items that have a time associated. Items with an associated timestamp that has a time (rather than just a date) are selected.
+  =:todo=: Group items that match any of the given TODO keywords. Argument may be a string or list of strings.

** Installation

This package will eventually be submitted to MELPA, and hopefully upstreamed into Org in some fashion.  In the meantime, install it like this:

1.  Install the =dash= and =s= packages from MELPA.
2.  Put the file =org-super-agenda.el= in your =load-path= directory.
3.  Add to your init file: ~(use-package org-super-agenda)~.
4.  Add a new custom command to =org-agenda-custom-commands= that calls =org-super-agenda=.  Use the example code above as a guideline.
5.  Start the day with confidence, knowing that nothing important has been lost in the jumble of /ahem/ overdue items.

** Development

Contributions and feedback are welcome.

** License

GPLv3+
